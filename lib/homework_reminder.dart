// üìÅ lib/models/study_schedule.dart

// üìÅ lib/services/reminder_service.dart


// üìÅ lib/screens/schedule_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
// üìÅ lib/services/database_service.dart
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
class DatabaseService {
  static Database? _db;

  static Future<Database> getDatabase() async {
    if (_db != null) return _db!;
    final dbPath = await getDatabasesPath();
    _db = await openDatabase(
      join(dbPath, 'schedule.db'),
      onCreate: (db, version) {
        return db.execute('''
          CREATE TABLE schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            dayOfWeek TEXT,
            period INTEGER,
            subject TEXT
          )
        ''');
      },
      version: 1,
    );
    return _db!;
  }

  static Future<void> insertSchedule(StudySchedule item) async {
    final db = await getDatabase();
    await db.insert('schedule', {
      'dayOfWeek': item.dayOfWeek,
      'period': item.period,
      'subject': item.subject,
    });
  }

  static Future<List<StudySchedule>> getAllSchedules() async {
    final db = await getDatabase();
    final List<Map<String, dynamic>> maps = await db.query('schedule');

    return maps.map((map) => StudySchedule(
      dayOfWeek: map['dayOfWeek'],
      period: map['period'],
      subject: map['subject'],
    )).toList();
  }

  static Future<void> clearSchedule() async {
    final db = await getDatabase();
    await db.delete('schedule');
  }
}

class StudySchedule {
  final String dayOfWeek; // e.g., "Monday"
  final int period; // 1, 2, 3...
  final String subject;

  StudySchedule({
    required this.dayOfWeek,
    required this.period,
    required this.subject,
  });
}

// üìÅ lib/models/homework_reminder.dart
class HomeworkReminder {
  final DateTime dateTime;
  final String subject;
  bool isCompleted;

  HomeworkReminder({
    required this.dateTime,
    required this.subject,
    this.isCompleted = false,
  });
}


class ReminderService {
  static final _notifications = FlutterLocalNotificationsPlugin();

  static Future<void> init() async {
    const AndroidInitializationSettings androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const InitializationSettings initSettings = InitializationSettings(android: androidSettings);
    await _notifications.initialize(initSettings);
  }

  static Future<void> scheduleReminder(String subject, DateTime dateTime) async {
    final id = dateTime.millisecondsSinceEpoch.remainder(100000);
    await _notifications.zonedSchedule(
      id,
      'Nh·∫Øc nh·ªü l√†m b√†i t·∫≠p',
      'ƒê·ª´ng qu√™n l√†m b√†i t·∫≠p m√¥n $subject nh√©!',
      tz.TZDateTime.from(dateTime, tz.local),
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'homework_channel',
          'Nh·∫Øc b√†i t·∫≠p',
          importance: Importance.high,
        ),
      ),
      androidAllowWhileIdle: true,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.time,
    );
  }
}

class ScheduleScreen extends StatefulWidget {
  @override
  _ScheduleScreenState createState() => _ScheduleScreenState();
}

class _ScheduleScreenState extends State<ScheduleScreen> {
  final List<String> subjects = [
    'To√°n', 'Ng·ªØ vƒÉn', 'Ti·∫øng Anh', 'V·∫≠t l√Ω', 'H√≥a h·ªçc', 'Sinh h·ªçc',
    'L·ªãch s·ª≠', 'ƒê·ªãa l√Ω', 'Gi√°o d·ª•c c√¥ng d√¢n', 'Tin h·ªçc', 'C√¥ng ngh·ªá',
    'Th·ªÉ d·ª•c', '√Çm nh·∫°c', 'M·ªπ thu·∫≠t', 'Ti·∫øng Ph√°p', 'Ti·∫øng Trung',
    'Ti·∫øng Nh·∫≠t', 'Qu·ªëc ph√≤ng - An ninh', 'Ho·∫°t ƒë·ªông tr·∫£i nghi·ªám', 'Ngh·ªÅ nghi·ªáp - H∆∞·ªõng nghi·ªáp'
  ];

  final List<String> days = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6'];
  final Map<String, List<String?>> schedule = {};

  @override
  void initState() {
    super.initState();
    for (var day in days) {
      schedule[day] = List.filled(5, null); // 5 ti·∫øt m·ªói ng√†y
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('L·ªãch h·ªçc tu·∫ßn')),
      body: ListView(
        children: days.map((day) {
          return FutureBuilder<List<StudySchedule>>(
        future: DatabaseService.getAllSchedules(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) return Center(child: CircularProgressIndicator());

          final daySchedules = snapshot.data!
              .where((item) => item.dayOfWeek == day)
              .toList()
            ..sort((a, b) => a.period.compareTo(b.period));

          return ListView.builder(
            itemCount: daySchedules.length,
            itemBuilder: (context, index) {
              final item = daySchedules[index];
              return ListTile(
                leading: CircleAvatar(child: Text('${item.period}')),
                title: Text(item.subject),
              );
            },
          );
        },
      );
          // return Card(
          //   margin: EdgeInsets.all(8),
          //   child: Column(
          //     crossAxisAlignment: CrossAxisAlignment.start,
          //     children: [
          //       Padding(
          //         padding: const EdgeInsets.all(8.0),
          //         child: Text(day, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
          //       ),
          //       GridView.builder(
          //         shrinkWrap: true,
          //         physics: NeverScrollableScrollPhysics(),
          //         gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          //           crossAxisCount: 5,
          //           childAspectRatio: 2,
          //           crossAxisSpacing: 4,
          //           mainAxisSpacing: 4,
          //         ),
          //         itemCount: 5,
          //         itemBuilder: (context, period) {
          //           final selected = schedule[day]![period];
          //           return ElevatedButton(
          //             style: ElevatedButton.styleFrom(
          //               backgroundColor: selected == null ? Colors.grey[300] : Colors.blueAccent,
          //             ),
          //             onPressed: () => _showSubjectPicker(context, day, period),
          //             child: Text(selected ?? 'Ti·∫øt ${period + 1}', textAlign: TextAlign.center),
          //           );
          //         },
          //       ),
          //     ],
          //   ),
          // );
        }).toList(),
      ),
    );
  }

  void _showSubjectPicker(BuildContext context, String day, int period) {
    showModalBottomSheet(
      context: context,
      builder: (context) => ListView(
        children: subjects.map((subject) => ListTile(
          title: Text(subject),
          onTap: () {
            DatabaseService.insertSchedule(
  StudySchedule(dayOfWeek: day, period: period + 1, subject: subject),
);

            setState(() {
              schedule[day]![period] = subject;
              final now = DateTime.now();
              final reminderTime = DateTime(now.year, now.month, now.day, 18, 0);
              ReminderService.scheduleReminder(subject, reminderTime);
            });
            Navigator.pop(context);
          },
        )).toList(),
      ),
    );
  }
}

class DailyScheduleScreen extends StatelessWidget {
  final String selectedDay;

  DailyScheduleScreen({required this.selectedDay});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Th·ªùi kho√° bi·ªÉu $selectedDay')),
      body: FutureBuilder<List<StudySchedule>>(
        future: DatabaseService.getAllSchedules(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) return Center(child: CircularProgressIndicator());

          final daySchedules = snapshot.data!
              .where((item) => item.dayOfWeek == selectedDay)
              .toList()
            ..sort((a, b) => a.period.compareTo(b.period));

          return ListView.builder(
            itemCount: daySchedules.length,
            itemBuilder: (context, index) {
              final item = daySchedules[index];
              return ListTile(
                leading: CircleAvatar(child: Text('${item.period}')),
                title: Text(item.subject),
              );
            },
          );
        },
      ),
    );
  }
}
